<application>
  <component name="AppStorage">
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Acquires in shared interruptible mode." />
      <item value="Acquire the shared lock allowing interruption" />
      <item value="Only deal with text because ES generated Ids are strings !" />
      <item value="Variable 'wrapper' initializer 'new ThirdPostWrapper()' is redundant" />
      <item value="Ensure" />
      <item value="Insur" />
      <item value="Insurance" />
      <item value="System property that instructs Spring to use the {@link IntrospectorIGNORE_ALL_BEANINFO} mode when calling the JavaBeans {@link Introspector}: &quot;spring.beaninfo.ignore&quot;, with a value of &quot;true&quot; skipping the search for {@code BeanInfo} classes (typically for scenarios where no such classes are being defined for beans in the application in the first place)." />
      <item value="Necessary" />
      <item value="Listener for the {@link SpringApplication} {@code run} method. {@link SpringApplicationRunListener}s are loaded via the {@link SpringFactoriesLoader} and should declare a public constructor that accepts a {@link SpringApplication} instance and a {@code String[]} of arguments. A new {@link SpringApplicationRunListener} instance will be created for each run." />
      <item value="ensure they are initialized" />
      <item value="Return a shared default application {@code ConversionService} instance, lazily building it once needed." />
      <item value="Environment" />
      <item value="Create and configure the environment" />
      <item value="Return a Collection of ApplicationListeners matching the given event type. Non-matching listeners get excluded early." />
      <item value="multicast Event" />
      <item value="Multicast the given application event to appropriate listeners. &lt;p&gt;If the {@code eventType} is {@code null}, a default type is built" />
      <item value="Use names and ensure unique to protect against duplicates" />
      <item value="Return a {@link ResolvableType} for the specified instance. The instance does not convey generic information but if it implements {@link ResolvableTypeProvider} a more precise {@link ResolvableType} can be used than the simple one based on the {@link forClass(Class) Class instance}." />
      <item value="configure Headless Property" />
      <item value="Simple stop watch, allowing for timing of a number of tasks, exposing total running time and running time for each named task." />
      <item value="Returns the {@code Class} object associated with the class or interface with the given string name. Invoking this method is equivalent to:" />
      <item value="deduce Main Application Class" />
      <item value="Server Port Info Application Context Initializer" />
      <item value="Delegating Application Context Initializer" />
      <item value="that will be applied to the Spring" />
      <item value="JERSEY INDICATOR CLASS" />
      <item value="deduce From Classpath" />
      <item value="Static helper that can be used to run a {@link SpringApplication} from the specified sources using default settings and user supplied arguments." />
      <item value="Configuration properties are also bound to the {@link SpringApplication}. This makes it possible to set {@link SpringApplication} properties dynamically, like additional sources (&quot;spring.main.sources&quot; - a CSV list) the flag to indicate a web environment (&quot;spring.main.web-application-type=none&quot;) or the flag to switch off the banner" />
      <item value="The location of an XML resource to be loaded by {@link XmlBeanDefinitionReader}, or a groovy script to be loaded by {@link GroovyBeanDefinitionReader}&lt;li&gt; &lt;li&gt;The name of a package to be scanned by {@link ClassPathBeanDefinitionScanner}" />
      <item value="The fully qualified class name to be loaded by" />
      <item value="The fully qualified class name to be loaded by {@link AnnotatedBeanDefinitionReader}&lt;" />
      <item value="{@link SpringApplication}s can read beans from a variety of different sources. It is generally recommended that a single {@code @Configuration} class is used to bootstrap your application, however, you may also set {@link getSources() sources} from:" />
      <item value="advanced" />
      <item value="For more advanced configuration a {@link SpringApplication} instance can be created and customized before being run:" />
      <item value="customized" />
      <item value="In most circumstances the static {@link run(Class, String[])} method can be called directly from your {@literal main} method to bootstrap your application:" />
      <item value="directly" />
      <item value="circumstances" />
      <item value="Trigger any {@link CommandLineRunner} beans&lt;li&gt;" />
      <item value="expose" />
      <item value="to expose command line arguments as Spring properties&lt;li&gt;" />
      <item value="appropriate" />
      <item value="By default class will perform the following steps to bootstrap your application:" />
      <item value="perform" />
      <item value="bootstrap" />
      <item value="Only used for pre 5.3 request where this type is still needed" />
      <item value="The query is executed against all shards, but only enough information is returned (not the document content). The results are then sorted and ranked, and based on it, only the relevant shards are asked for the actual document content. The return number of hits is exactly as specified in size, since they are the only ones that are fetched. This is very handy when the index has a lot of shards (not replicas, shard id groups)." />
      <item value="Same as {@link QUERY_THEN_FETCH}, except for an initial scatter phase which goes and computes the distributed term frequencies for more accurate scoring." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="349" />
        <entry key="ENGLISH" value="350" />
        <entry key="ARABIC" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="2" />
        <entry key="SPANISH" value="1" />
        <entry key="HUNGARIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1619407167370" />
  </component>
</application>