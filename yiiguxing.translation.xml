<application>
  <component name="AppStorage">
    <histories>
      <item value="preserve" />
      <item value="Initializes or doubles table size. If null, allocates in * accord with initial capacity target held in field threshold. * Otherwise, because we are using power-of-two expansion, the * elements from each bin must either stay at same index, or move * with a power of two offset in the new table." />
      <item value="suspend" />
      <item value="xecute non-transactionally, suspend the current transaction if one exists. * Analogous to EJB transaction attribute of the same name. * &lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; Actual transaction suspension will not work out-of-the-box * on all transaction managers. This in particular applies to * {@link org.springframework.transaction.jta.JtaTransactionManager}, * which requires the {@code javax.transaction.TransactionManager} to be * made available it to it (which is server-specific in standard Java EE). * @see org.springframework.transaction.jta.JtaTransactionManager#setTransactionManager" />
      <item value="NESTED" />
      <item value="behaviors" />
      <item value="propagation" />
      <item value="FOUR" />
      <item value="THREE" />
      <item value="A visitor of files. An implementation of this interface is provided to the * {@link Files#walkFileTree Files.walkFileTree} methods to visit each file in * a file tree." />
      <item value="Make invocation available if necessary." />
      <item value="The functionality in this class might be used by a target object that needed access * to resources on the invocation. However, this approach should not be used when there is * a reasonable alternative, as it makes application code dependent on usage under AOP and * the Spring AOP framework in particular." />
      <item value="Spring's AOP framework does not expose proxies by default, as there is a performance cost * in doing so." />
      <item value="The {@code currentProxy()} method is usable if the AOP framework is configured to * expose the current proxy (not the default). It returns the AOP proxy in use. Target objects * or advice can use this to make advised calls, in the same way as {@code getEJBObject()} * can be used in EJBs. They can also use it to find advice configuration" />
      <item value="Class containing static methods used to obtain information about the current AOP invocation." />
      <item value="When the number of * entries in the hash table exceeds the product of the load factor and the * current capacity" />
      <item value="a measure of how full the hash table is allowed to * get before its capacity is automatically increased" />
      <item value="mutual" />
      <item value="terminated" />
      <item value="DESTROYED" />
      <item value="lost race vs opposite mode" />
      <item value="Looks at the object at the top of this stack without removing it * from the stack." />
      <item value="Weak" />
      <item value="Checks and updates status for a node that failed to acquire. * Returns true if thread should block. This is the main signal * control in all acquire loops. Requires that pred == node.prev." />
      <item value="he wait queue is a variant of a &quot;CLH&quot; (Craig, Landin, and * Hagersten) lock queue. CLH locks are normally used for * spinlocks. We instead use them for blocking synchronizers, but * use the same basic tactic of holding some of the control * information about a thread in the predecessor of its node. A * &quot;status&quot; field in each node keeps track of whether a thread * should block. A node is signalled when its predecessor * releases. Each node of the queue otherwise serves as a * specific-notification-style monitor holding a single waiting * thread. The status field does NOT control whether threads are * granted locks etc though. A thread may try to acquire if it is * first in the queue. But being first does not guarantee success; * it only gives the right to contend. So the currently released * contender thread may need to rewait." />
      <item value="add Goods" />
      <item value="Returns rank of value, with the scores ordered from high to low." />
      <item value="Field name of map entries that are used as key for the element in the implicit map." />
      <item value="Sets the URL of the target Web Service." />
      <item value="ets the URL of the target Web Service." />
      <item value="Not part of JAX-RPC specification." />
      <item value="Axis' JAXRPC Dynamic Invocation Interface implementation of the Call * interface. This class should be used to actually invoke the Web Service. * It can be prefilled by a WSDL document (on the constructor to the Service * object) or you can fill in the data yourself." />
      <item value="Adds the specified parameter to the list of parameters for the * operation associated with this Call object." />
      <item value="A rule that skips servers with &quot;tripped&quot; circuit breaker and picks the * server with lowest concurrent requests. * &lt;p&gt; * This rule should typically work with {@link ServerListSubsetFilter} which puts a limit on the * servers that is visible to the rule. This ensure that it only needs to find the minimal * concurrent requests among a small number of servers. Also, each client will get a random list of * servers which avoids the problem that one server with the lowest concurrent requests is * chosen by a large number of clients and immediately gets overwhelmed. *" />
      <item value="RCN REDUNDANT NULLCHECK OF NULL VALUE" />
      <item value="then Compose" />
      <item value="then Combine" />
      <item value="Praise" />
      <item value="The value may indicate a suggestion for a logical component name, * to be turned into a Spring bean in case of an autodetected component." />
      <item value="the parallelism level. For default value" />
      <item value="if a {@link AttributeKey} for the given {@code name} exists." />
      <item value="Creates a new {@link AttributeKey} for the given {@code name} or fail with an * {@link IllegalArgumentException} if a {@link AttributeKey} for the given {@code name} exists." />
      <item value="Be aware that it is not be * possible to have multiple keys with the same name." />
      <item value="Key which can be used to access {@link Attribute} out of the {@link AttributeMap}. Be aware that it is not be * possible to have multiple keys with the same name." />
      <item value="conclude" />
      <item value="conclude Count" />
      <item value="declarations" />
      <item value="interrupt" />
      <item value="Tests whether the current thread has been interrupted. The * &lt;i&gt;interrupted status&lt;/i&gt; of the thread is cleared by this method. In * other words, if this method were to be called twice in succession, the * second call would return false (unless the current thread were * interrupted again, after the first call had cleared its interrupted * status and before the second call had examined it)." />
      <item value="retry Attempts" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="118" />
        <entry key="ENGLISH" value="119" />
        <entry key="ROMANIAN" value="1" />
      </map>
    </option>
  </component>
</application>