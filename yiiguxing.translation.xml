<application>
  <component name="AppStorage">
    <histories>
      <item value="DESTROYED" />
      <item value="lost race vs opposite mode" />
      <item value="Looks at the object at the top of this stack without removing it * from the stack." />
      <item value="Weak" />
      <item value="Checks and updates status for a node that failed to acquire. * Returns true if thread should block. This is the main signal * control in all acquire loops. Requires that pred == node.prev." />
      <item value="he wait queue is a variant of a &quot;CLH&quot; (Craig, Landin, and * Hagersten) lock queue. CLH locks are normally used for * spinlocks. We instead use them for blocking synchronizers, but * use the same basic tactic of holding some of the control * information about a thread in the predecessor of its node. A * &quot;status&quot; field in each node keeps track of whether a thread * should block. A node is signalled when its predecessor * releases. Each node of the queue otherwise serves as a * specific-notification-style monitor holding a single waiting * thread. The status field does NOT control whether threads are * granted locks etc though. A thread may try to acquire if it is * first in the queue. But being first does not guarantee success; * it only gives the right to contend. So the currently released * contender thread may need to rewait." />
      <item value="add Goods" />
      <item value="Returns rank of value, with the scores ordered from high to low." />
      <item value="Field name of map entries that are used as key for the element in the implicit map." />
      <item value="Sets the URL of the target Web Service." />
      <item value="ets the URL of the target Web Service." />
      <item value="Not part of JAX-RPC specification." />
      <item value="Axis' JAXRPC Dynamic Invocation Interface implementation of the Call * interface. This class should be used to actually invoke the Web Service. * It can be prefilled by a WSDL document (on the constructor to the Service * object) or you can fill in the data yourself." />
      <item value="Adds the specified parameter to the list of parameters for the * operation associated with this Call object." />
      <item value="A rule that skips servers with &quot;tripped&quot; circuit breaker and picks the * server with lowest concurrent requests. * &lt;p&gt; * This rule should typically work with {@link ServerListSubsetFilter} which puts a limit on the * servers that is visible to the rule. This ensure that it only needs to find the minimal * concurrent requests among a small number of servers. Also, each client will get a random list of * servers which avoids the problem that one server with the lowest concurrent requests is * chosen by a large number of clients and immediately gets overwhelmed. *" />
      <item value="RCN REDUNDANT NULLCHECK OF NULL VALUE" />
      <item value="then Compose" />
      <item value="then Combine" />
      <item value="Praise" />
      <item value="The value may indicate a suggestion for a logical component name, * to be turned into a Spring bean in case of an autodetected component." />
      <item value="the parallelism level. For default value" />
      <item value="if a {@link AttributeKey} for the given {@code name} exists." />
      <item value="Creates a new {@link AttributeKey} for the given {@code name} or fail with an * {@link IllegalArgumentException} if a {@link AttributeKey} for the given {@code name} exists." />
      <item value="Be aware that it is not be * possible to have multiple keys with the same name." />
      <item value="Key which can be used to access {@link Attribute} out of the {@link AttributeMap}. Be aware that it is not be * possible to have multiple keys with the same name." />
      <item value="conclude" />
      <item value="conclude Count" />
      <item value="declarations" />
      <item value="interrupt" />
      <item value="Tests whether the current thread has been interrupted. The * &lt;i&gt;interrupted status&lt;/i&gt; of the thread is cleared by this method. In * other words, if this method were to be called twice in succession, the * second call would return false (unless the current thread were * interrupted again, after the first call had cleared its interrupted * status and before the second call had examined it)." />
      <item value="retry Attempts" />
      <item value="Attempt" />
      <item value="identity" />
      <item value="and vice versa" />
      <item value="For instance" />
      <item value="compatible" />
      <item value="Indicate whether this {@code MediaType} is compatible with the given media type" />
      <item value="Ambiguous constructor argument types - did you specify the correct bean references as constructor arguments" />
      <item value="Set up event handlers to handle events from the ring buffer" />
      <item value="Histogram for tracking the frequency of observations of values below interval upper bounds" />
      <item value="Histogram" />
      <item value="The Brutal Truth" />
      <item value="Maxims" />
      <item value="Maxim" />
      <item value="The Four Maxims of Java Concurrency" />
      <item value="“But I don’t want to go among mad people,” Alice remarked. “Oh, you can’t help that,” said the Cat. “We’re all mad here. I’m mad. You’re mad.” “How do you know I’m mad?” said Alice. “You must be,” said the Cat, “or you wouldn’t have come here.” — Alice’s Adventures in Wonderland, Chapter 6." />
      <item value="the bound (exclusive) of each random value" />
      <item value="the origin (inclusive) of each random value" />
      <item value="Indicates the &lt;em&gt;containing annotation type&lt;/em&gt; for the * repeatable annotation type." />
      <item value="the initial seed" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="96" />
        <entry key="ENGLISH" value="97" />
        <entry key="ROMANIAN" value="1" />
      </map>
    </option>
  </component>
</application>