<application>
  <component name="AppStorage">
    <histories>
      <item value="Return a Collection of ApplicationListeners matching the given event type. Non-matching listeners get excluded early." />
      <item value="multicast Event" />
      <item value="Multicast the given application event to appropriate listeners. &lt;p&gt;If the {@code eventType} is {@code null}, a default type is built" />
      <item value="Use names and ensure unique to protect against duplicates" />
      <item value="Return a {@link ResolvableType} for the specified instance. The instance does not convey generic information but if it implements {@link ResolvableTypeProvider} a more precise {@link ResolvableType} can be used than the simple one based on the {@link forClass(Class) Class instance}." />
      <item value="configure Headless Property" />
      <item value="Simple stop watch, allowing for timing of a number of tasks, exposing total running time and running time for each named task." />
      <item value="Returns the {@code Class} object associated with the class or interface with the given string name. Invoking this method is equivalent to:" />
      <item value="deduce Main Application Class" />
      <item value="Server Port Info Application Context Initializer" />
      <item value="Delegating Application Context Initializer" />
      <item value="that will be applied to the Spring" />
      <item value="JERSEY INDICATOR CLASS" />
      <item value="deduce From Classpath" />
      <item value="Static helper that can be used to run a {@link SpringApplication} from the specified sources using default settings and user supplied arguments." />
      <item value="Configuration properties are also bound to the {@link SpringApplication}. This makes it possible to set {@link SpringApplication} properties dynamically, like additional sources (&quot;spring.main.sources&quot; - a CSV list) the flag to indicate a web environment (&quot;spring.main.web-application-type=none&quot;) or the flag to switch off the banner" />
      <item value="The location of an XML resource to be loaded by {@link XmlBeanDefinitionReader}, or a groovy script to be loaded by {@link GroovyBeanDefinitionReader}&lt;li&gt; &lt;li&gt;The name of a package to be scanned by {@link ClassPathBeanDefinitionScanner}" />
      <item value="The fully qualified class name to be loaded by" />
      <item value="The fully qualified class name to be loaded by {@link AnnotatedBeanDefinitionReader}&lt;" />
      <item value="{@link SpringApplication}s can read beans from a variety of different sources. It is generally recommended that a single {@code @Configuration} class is used to bootstrap your application, however, you may also set {@link getSources() sources} from:" />
      <item value="advanced" />
      <item value="For more advanced configuration a {@link SpringApplication} instance can be created and customized before being run:" />
      <item value="customized" />
      <item value="In most circumstances the static {@link run(Class, String[])} method can be called directly from your {@literal main} method to bootstrap your application:" />
      <item value="directly" />
      <item value="circumstances" />
      <item value="Trigger any {@link CommandLineRunner} beans&lt;li&gt;" />
      <item value="expose" />
      <item value="to expose command line arguments as Spring properties&lt;li&gt;" />
      <item value="appropriate" />
      <item value="By default class will perform the following steps to bootstrap your application:" />
      <item value="perform" />
      <item value="bootstrap" />
      <item value="Only used for pre 5.3 request where this type is still needed" />
      <item value="The query is executed against all shards, but only enough information is returned (not the document content). The results are then sorted and ranked, and based on it, only the relevant shards are asked for the actual document content. The return number of hits is exactly as specified in size, since they are the only ones that are fetched. This is very handy when the index has a lot of shards (not replicas, shard id groups)." />
      <item value="Same as {@link QUERY_THEN_FETCH}, except for an initial scatter phase which goes and computes the distributed term frequencies for more accurate scoring." />
      <item value="DRAFT" />
      <item value="VIDEO" />
      <item value="Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is {@link java.util.stream.BaseStreamclose() closed} after its contents have been placed into this stream. (If a mapped stream is {@code null} an empty stream is used, instead.)" />
      <item value="cartesian Product" />
      <item value="union Distinct" />
      <item value="ARGV" />
      <item value="If we find key, then we need to swap it with the stale entry to maintain hash table order. The newly stale slot, or any other stale slot encountered above it, can then be sent to expungeStaleEntry to remove or rehash all of the other entries in run." />
      <item value="Graphics Environment" />
      <item value="This class is used to generate native system input events for the purposes of test automation, self-running demos, and other applications where control of the mouse and keyboard is needed. The primary purpose of Robot is to facilitate automated testing of Java platform implementations." />
      <item value="descending" />
      <item value="ascending" />
      <item value="Quicksort is used in preference to merge sort." />
      <item value="Instantiation of utility class 'Singleton'" />
      <item value="Insertion" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="349" />
        <entry key="ENGLISH" value="350" />
        <entry key="ARABIC" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="2" />
        <entry key="SPANISH" value="1" />
        <entry key="HUNGARIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1618798099679" />
  </component>
</application>