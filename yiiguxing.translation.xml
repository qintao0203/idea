<application>
  <component name="AppStorage">
    <histories>
      <item value="cartesian Product" />
      <item value="union Distinct" />
      <item value="ARGV" />
      <item value="If we find key, then we need to swap it with the stale entry to maintain hash table order. The newly stale slot, or any other stale slot encountered above it, can then be sent to expungeStaleEntry to remove or rehash all of the other entries in run." />
      <item value="Graphics Environment" />
      <item value="This class is used to generate native system input events for the purposes of test automation, self-running demos, and other applications where control of the mouse and keyboard is needed. The primary purpose of Robot is to facilitate automated testing of Java platform implementations." />
      <item value="descending" />
      <item value="ascending" />
      <item value="Quicksort is used in preference to merge sort." />
      <item value="Instantiation of utility class 'Singleton'" />
      <item value="Insertion" />
      <item value="Tie-breaking utility for ordering insertions when equal hashCodes and non-comparable. We don't require a total order, just a consistent insertion rule to maintain equivalence across rebalancings. Tie-breaking further than necessary simplifies testing a bit." />
      <item value="parallelism" />
      <item value="It is strongly recommended the spliterator report a characteristic of {@code IMMUTABLE} or {@code CONCURRENT}, or be &lt;a href=&quot;..Spliterator.htmlbinding&quot;&gt;late-binding&lt;a&gt;. Otherwise, {@link stream(java.util.function.Supplier, int, boolean)} should be used to reduce the scope of potential interference with the source. See &lt;a href=&quot;package-summary.htmlNonInterference&quot;&gt;Non-Interference&lt;a&gt; for more details." />
      <item value="The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences." />
      <item value="boost" />
      <item value="Match query is a query that analyzes the text and constructs a phrase prefix query as the result of the analysis." />
      <item value="Match query is a query that analyzes the text and constructs a phrase prefix" />
      <item value="power" />
      <item value="MUST be a power of two." />
      <item value="binned" />
      <item value="bins" />
      <item value="specified" />
      <item value="compute" />
      <item value="Absent" />
      <item value="Computes key.hashCode() and spreads (XORs) higher bits of hash to lower. Because the table uses power-of-two masking, sets of hashes that vary only in bits above the current mask will always collide. (Among known examples are sets of Float keys holding consecutive whole numbers in small tables.) So we apply a transform that spreads the impact of higher bits downward. There is a tradeoff between speed, utility, and quality of bit-spreading. Because many common sets of hashes are already reasonably distributed (so don't benefit from spreading), and because we use trees to handle large sets of collisions in bins, we just XOR some shifted bits in the cheapest possible way to reduce systematic lossage, as well as to incorporate impact of the highest bits that would otherwise never be used in index calculations because of table bounds." />
      <item value="If you want code syntax highlighted, use GitHub Flavored Markdown rendered from GitHub's markdown API." />
      <item value="Calculate how many parts to be divided" />
      <item value="The Content-MD5 you specified was invalid." />
      <item value="The callback response body. Caller needs to close it." />
      <item value="clashes with class of same name" />
      <item value="the Executor to use, or {@code null} if the default should be used." />
      <item value="Calculates the MD5 digest and returns the value as a 32 character hex string." />
      <item value="Favourite" />
      <item value="protection" />
      <item value="The ring buffer is set up to prevent overwriting any entry that is yet to be processed by the slowest event processor." />
      <item value="Starts the event processors and returns the fully configured ring buffer." />
      <item value="Intermediate location of uploaded files." />
      <item value="Whether to enable support of multipart uploads." />
      <item value="record" />
      <item value="Truncation" />
      <item value="note" />
      <item value="detail" />
      <item value="Appointment" />
      <item value="Incoming" />
      <item value="Coin" />
      <item value=" wave" />
      <item value=" waves" />
      <item value="great waves" />
      <item value="æ¶›" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="349" />
        <entry key="ENGLISH" value="350" />
        <entry key="ARABIC" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="2" />
        <entry key="SPANISH" value="1" />
        <entry key="HUNGARIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1618306549865" />
  </component>
</application>