<application>
  <component name="AppStorage">
    <histories>
      <item value="unmodifiable" />
      <item value="extensions" />
      <item value="Connecting the registry needs to support the contract: 1. When the check=false is set, the connection is not checked, otherwise the exception is thrown when disconnection 2. Support username:password authority authentication on URL. 3. Support the backup=10.20.153.10 candidate registry cluster address. 4. Support file=registry.cache local disk file cache. 5. Support the timeout=1000 request timeout setting. 6. Support session=60000 session timeout or expiration settings." />
      <item value="Query the registered data that matches the conditions. Corresponding to the push mode of the subscription, this is the pull mode and returns only one result." />
      <item value="2. Unregister according to the full url match." />
      <item value="1. If it is the persistent stored data of dynamic=false, the registration data can not be found, then the IllegalStateException is thrown, otherwise it is ignored." />
      <item value="persistently" />
      <item value="Registering is required to support the contract: 1. When the URL sets the check=false parameter. When the registration fails, the exception is not thrown and retried in the background. Otherwise, the exception will be thrown. 2. When URL sets the dynamic=false parameter, it needs to be stored persistently, otherwise, it should be deleted automatically when the registrant has an abnormal exit. 3. When the URL sets category=routers, it means classified storage, the default category is providers, and the data can be notified by the classified section. 4. When the registry is restarted, network jitter, data can not be lost, including automatically deleting data from the broken line. 5. Allow URLs which have the same URL but different parameters to coexist,they can't cover each other." />
      <item value="Registering is required to support the contract:&lt;br&gt; 1. When the URL sets the check=false parameter. When the registration fails, the exception is not thrown and retried in the background. Otherwise, the exception will be thrown.&lt;br&gt; 2. When URL sets the dynamic=false parameter, it needs to be stored persistently, otherwise, it should be deleted automatically when the registrant has an abnormal exit.&lt;br&gt; 3. When the URL sets category=routers, it means classified storage, the default category is providers, and the data can be notified by the classified section. &lt;br&gt; 4. When the registry is restarted, network jitter, data can not be lost, including automatically deleting data from the broken line.&lt;br&gt; 5. Allow URLs which have the same URL but different parameters to coexist,they can't cover each other." />
      <item value="The order of notifications to be guaranteed by the notifications(That is, the implementation of the registry). Such as: single thread push, queue serialization, and version comparison." />
      <item value="If a data type is empty, need to notify a empty protocol with category parameter identification of url data." />
      <item value="t the time of change, different types of data are allowed to be notified separately, e.g.: providers, consumers, routers, overrides. It allows only one of these types to be notified, but the data of this type must be full, not incremental." />
      <item value="The first notification at a subscription must be a full notification of all types of data of a service." />
      <item value="Always notifications on the service interface and the dimension of the data type. that is, won't notify part of the same type data belonging to one service. Users do not need to compare the results of the previous notification." />
      <item value="contract" />
      <item value="Notify needs to support the contract" />
      <item value="support" />
      <item value="Triggered when a service change notification is received." />
      <item value="Reconnection period in milliseconds for register center" />
      <item value="To decide whether register center saves file synchronously, the default value is asynchronously" />
      <item value="processing when receiving the address list" />
      <item value="processing" />
      <item value="receiving" />
      <item value="initiative" />
      <item value="DUPLICATE" />
      <item value="Survivor" />
      <item value="preserve" />
      <item value="Initializes or doubles table size. If null, allocates in * accord with initial capacity target held in field threshold. * Otherwise, because we are using power-of-two expansion, the * elements from each bin must either stay at same index, or move * with a power of two offset in the new table." />
      <item value="suspend" />
      <item value="xecute non-transactionally, suspend the current transaction if one exists. * Analogous to EJB transaction attribute of the same name. * &lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; Actual transaction suspension will not work out-of-the-box * on all transaction managers. This in particular applies to * {@link org.springframework.transaction.jta.JtaTransactionManager}, * which requires the {@code javax.transaction.TransactionManager} to be * made available it to it (which is server-specific in standard Java EE). * @see org.springframework.transaction.jta.JtaTransactionManager#setTransactionManager" />
      <item value="NESTED" />
      <item value="behaviors" />
      <item value="propagation" />
      <item value="FOUR" />
      <item value="THREE" />
      <item value="A visitor of files. An implementation of this interface is provided to the * {@link Files#walkFileTree Files.walkFileTree} methods to visit each file in * a file tree." />
      <item value="Make invocation available if necessary." />
      <item value="The functionality in this class might be used by a target object that needed access * to resources on the invocation. However, this approach should not be used when there is * a reasonable alternative, as it makes application code dependent on usage under AOP and * the Spring AOP framework in particular." />
      <item value="Spring's AOP framework does not expose proxies by default, as there is a performance cost * in doing so." />
      <item value="The {@code currentProxy()} method is usable if the AOP framework is configured to * expose the current proxy (not the default). It returns the AOP proxy in use. Target objects * or advice can use this to make advised calls, in the same way as {@code getEJBObject()} * can be used in EJBs. They can also use it to find advice configuration" />
      <item value="Class containing static methods used to obtain information about the current AOP invocation." />
      <item value="When the number of * entries in the hash table exceeds the product of the load factor and the * current capacity" />
      <item value="a measure of how full the hash table is allowed to * get before its capacity is automatically increased" />
      <item value="mutual" />
      <item value="terminated" />
      <item value="DESTROYED" />
      <item value="lost race vs opposite mode" />
      <item value="Looks at the object at the top of this stack without removing it * from the stack." />
      <item value="Weak" />
      <item value="Checks and updates status for a node that failed to acquire. * Returns true if thread should block. This is the main signal * control in all acquire loops. Requires that pred == node.prev." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="145" />
        <entry key="ENGLISH" value="146" />
        <entry key="ROMANIAN" value="1" />
      </map>
    </option>
  </component>
</application>